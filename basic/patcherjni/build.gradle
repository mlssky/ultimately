apply plugin: 'com.android.library'

android {

    compileSdkVersion rootProject.ext.android.compileSdkVersion
    defaultConfig {
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode 1
        versionName "1.0"
//        ndk {
//            abiFilters 'armeabi-v7a'
//        }
    }

//    设置可执行文件为ndk-Build
//    设置NDK_PROJECT_PATH=null
//    设置APP_BUILD_SCRIPT参数，其值指向Android.mk文件
//    设置NDK_APPLICATION_MK参数，其值指向Application.mk文件（如果存在的话，不存在就不会设置该参数）
//    设置APP_ABI参数，其值为armeabi，armeabi-v7a，arm64-v8a，x86，x86_64，mips，mips64中的一个。
//    设置NDK_ALL_ABIS参数，其值等同于APP_ABI
//    设置NDK_DEBUG参数，表示十分是debug构建，debug含符号信息，so很大，便于调试，release移除了debug信息，小很多。其值来源于build.gradle中的debuggable值。
//    设置APP_PLATFORM参数，一般设成和项目的最小api版本一样即可，gradle会通过它和minSdk查找出合适的值
//    设置NDK_OUT参数，其值为obj文件产生目录，一般指向项目的build路径下的intermediates/ndkBuild/$buildType/obj目录
//    设置NDK_LIBS_OUT参数，其值为libs参数目录，用于so的存储，一般指向项目的build路径下的intermediates/ndkBuild/$buildType/lib目录
//    设置可选项APP_CFLAGS参数，如果不为空，则设置，其值为编译C时的一些参数
//    设置可选项APP_CPPFLAGS参数，如果不为空，则设置，其值为编译C++时的一些参数
//    设置可选项arguments，其值为gradle传进来的arguments参数。
//    设置APP_SHORT_COMMANDS=false
//    设置LOCAL_SHORT_COMMANDS=false
//    添加-B参数
//    添加-n参数

//    https://www.colabug.com/211112.html
//    externalNativeBuild {
////        ndkDirectory file()
//        ndkBuild {
//            // Tells Gradle to find the root ndk-build script in the same
//            // directory as the module's build.gradle file. Gradle requires this
//            // build script to add your ndk-build project as a build dependency and
//            // pull your native sources into your Android project.
//            path file('./jni/Android.mk')
//            // Tells Gradle to put outputs from external native
//            // builds in the path specified below.
//            buildStagingDirectory "./outputs/ndk-build"
//        }
////        cmake{
////
////        }
//    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
}
