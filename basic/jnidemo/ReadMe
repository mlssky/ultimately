使用javah 生成jni 头文件
生成Native 头文件：
 #1:切换到Java目录下
 #javah -d ./jni(生成头文件的文件目录)
  -classpath （class文件路径）/Users/mengliwei/home/work/repo/ultimately/basic/jnidemo/build/intermediates/javac/debug/classes
  -jni tv.yixia.testj.TestNativeMethod

获取java native方法的签名
用法：
需要先切换到Classes目录
1、javap -s packagename.classname
2、javap -s -p packagename.classname
-s表示打印签名信息
-p表示打印所有函数和成员的签名信息，默认只打印public的签名信息。


#ndk-Build 命令相关参数
//    设置可执行文件为ndk-Build
//    设置NDK_PROJECT_PATH=null
//    设置APP_BUILD_SCRIPT参数，其值指向Android.mk文件
//    设置NDK_APPLICATION_MK参数，其值指向Application.mk文件（如果存在的话，不存在就不会设置该参数）
//    设置APP_ABI参数，其值为armeabi，armeabi-v7a，arm64-v8a，x86，x86_64，mips，mips64中的一个。
//    设置NDK_ALL_ABIS参数，其值等同于APP_ABI
//    设置NDK_DEBUG参数，表示十分是debug构建，debug含符号信息，so很大，便于调试，release移除了debug信息，小很多。其值来源于build.gradle中的debuggable值。
//    设置APP_PLATFORM参数，一般设成和项目的最小api版本一样即可，gradle会通过它和minSdk查找出合适的值
//    设置NDK_OUT参数，其值为obj文件产生目录，一般指向项目的build路径下的intermediates/ndkBuild/$buildType/obj目录
//    设置NDK_LIBS_OUT参数，其值为libs参数目录，用于so的存储，一般指向项目的build路径下的intermediates/ndkBuild/$buildType/lib目录
//    设置可选项APP_CFLAGS参数，如果不为空，则设置，其值为编译C时的一些参数
//    设置可选项APP_CPPFLAGS参数，如果不为空，则设置，其值为编译C++时的一些参数
//    设置可选项arguments，其值为gradle传进来的arguments参数。
//    设置APP_SHORT_COMMANDS=false
//    设置LOCAL_SHORT_COMMANDS=false
//    添加-B参数
//    添加-n参数